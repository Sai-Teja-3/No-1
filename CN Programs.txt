/*Experiment 1: Implement on a data set of characters the CRC.*/
#include<stdlib.h>
#include<conio.h>
#include<stdio.h>
int main()
{
	int i,j,n,g,a,arr[20],gen[20],b[20],q[20],s;
	printf("Transmitter side:");
	printf("\nEnter no. of data bits:");
	scanf("%d",&n);
	printf("Enter data:");
	for(i=0;i<n;i++)
		scanf("%d",&arr[i]);
	printf("Enter size of generator:");
	scanf("%d",&g);
	do{
		printf("Enter generator:");
		for(j=0;j<g;j++)
			scanf("%d",&gen[j]);
	}
	while(gen[0]!=1);
	printf("\n\tThe generator matrix:");
	for(j=0;j<g;j++)
		printf("%d",gen[j]);
	a=n+(g-1);
	printf("\n\tThe appended matrix is:");
	for(i=0;i< j;++i)
		arr[n+i]=0;
	for(i=0;i< a;++i)
		printf("%d",arr[i]);
	for(i=0;i< n;++i)
		q[i]= arr[i];
	for(i=0;i< n;++i)
	{
		if(arr[i]==0)
		{
			for(j=i;j<g+i;++j)
				arr[j] = arr[j]^0;
		}
		else
		{
			arr[i] = arr[i]^gen[0];
			arr[i+1]=arr[i+1]^gen[1];
			arr[i+2]=arr[i+2]^gen[2];
			arr[i+3]=arr[i+3]^gen[3];
		} 
	}
	printf("\n\tThe CRC is :");
	for(i=n;i< a;++i)
		printf("%d",arr[i]);
	s=n+a;
	for(i=n;i<s;i++)
		q[i]=arr[i];
		printf("\n");
	for(i=0;i<a;i++)
		printf("%d",q[i]);
}



/*
Output:
Transmitter side:
Enter no. of data bits:8 Enter data:1 0 1 0 0 0 0 1 Enter size of generator:4 Enter generator:1 0 0 1 The generator matrix:1001
The appended matrix is:10100001000 The CRC is :111
10100001111
*/

/*Experiment 2 :
A) Develop a simple data link layer that performs the flow control using the sliding window protocol*/
#include<stdio.h>
int main(){
	int n,f,frames[30],i;
	printf("Enter window size : ");
	scanf("%d",&n);
	printf("Enter number of frames to transmit: ");
	scanf("%d",&f);
	printf("Enter %d frames: ",f);
	for(i=1;i<=f;i++){
		scanf("%d",&frames[i]);
	}
	printf("With sliding window protocol the frames will be sent in the following manner (assuming no corruption of frames)");
	printf("\nAfter sending %d frames at each stage sender waits for acknowledgement sent by the receiver ",n);

	for(i=1;i<=f;i++){
		if(i%n==0){
			printf("%d ",frames[i]);
			printf("\nAcknowledgement of above frames sent is received by sender ");

		}
		else{
			//printf("recieved by sender\n");
			printf("%d ",frames[i]);
		}
	}
	if(f%n!=0){
	printf("\nAcknowledgement of above frames sent is received by sender ");

	}
}
/*
Output:
Enter window size: 3
Enter number of frames to transmit: 5 
Enter 5 frames: 12 5 89 4 6
With sliding window protocol the frames will be sent in the following manner (assuming no corruption of frames)
After sending 3 frames at each stage sender waits for acknowledgement sent by the receiver 12 5 89
Acknowledgement of above frames sent is received by sender 4 6
Acknowledgement of above frames sent is received by sender
*/

/*B. Develop a simple data link layer that performs the flow control using the Go Back N protocol in       “c”*/
#include<stdio.h>
int main()
{
    int windowsize,sent=0,ack,i;
    printf("Enter windows size:");
    scanf("%d",&windowsize);
    while(1)
    {
        for(i=0;i<windowsize;i++)
        {
            printf("Frame %d has been transmitted\n",sent);
            sent++;
            if(sent==windowsize)
            break;
        }
        printf("\nPlease enter the last AcknowLedgement received.");
        scanf("%d",&ack);
        if(ack==windowsize)
        break;
        else
        sent=ack;
    }
    return 0;
}
/*
Output:
enter window size 8
Frame 0 has been transmitted. 
Frame 1 has been transmitted. 
Frame 2 has been transmitted. 
Frame 3 has been transmitted. 
Frame 4 has been transmitted. 
Frame 5 has been transmitted. 
Frame 6 has been transmitted. 
Frame 7 has been transmitted.
Please enter the last Acknowledgement received. 2
Frame 2 has been transmitted.
 Frame 3 has been transmitted. 
Frame 4 has been transmitted. 
Frame 5 has been transmitted.
Frame 6 has been transmitted
Frame 7 has been transmitted  
Please enter the last Acknowledgement received. 8 
*/

/*Experiment 3 :
Take an example subnet of hosts and obtain a broadcast tree for the subnet.*/
#include <stdio.h>
int min();
int distance[20];
int n;
int main()
{
    int adj[20][20],adj1[20][20],flag[30];
    int i,j,root,x;
    int source,count=1,y=0;
    printf("enter no of nodes");
    scanf("%d",&n);
    printf("enter the adjacency matrix\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            scanf("%d",&adj[i][j]);
        }
    }
    printf("enter the source for broadcasting ");
    scanf("%d",&source);
    for(i=0;i<n;i++)
    {
        flag[i]=0;
    }
    for(root=0;root<n;root++)
    {
        for(i=0;i<n;i++)
        {
            distance[i]=adj[root][i];
        }
        x=min();
        for(i=0;i<n;i++)
        {
            if(distance[i]==x)
            {
                adj1[root][i]=x;
                adj1[i][root]=x;
            }
            else
            {
                adj1[root][i]=0;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(adj1[i][j]!=0)
            {
                adj1[j][i]=adj[i][j];
            }
        }
    }
    printf("given adjacency matrix is\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%d ",adj[i][j]);
        }
        printf("\n");
    }
    printf("minimal spanning tree\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%d ",adj1[i][j]);
        }
        printf("\n");
    }
    root=source;
    flag[root]=1;
    while(count!=y)
    {
        for(i=0;i<n;i++)
        {
            if(adj1[root][i]!=0 && flag[root]==1 && flag[i]!=1)
            {
                printf("%d sends message to %d \n",root,i);
                flag[i]=1;
            }
        }
        if(root<n-1)
        {
            root++;
        }
        else
        {
            root=0;
        }
        for(i=0;i<n;i++)
        {
            if(flag[i]==0)
            {
                break;
            }
        }
        if(i==n)
        {
            count=y;
        }
    }
}
int min()
{
    int i,j=0;
    int mini;
    int distance1[10];
    for(i=0;i<n;i++)
    {
        if(distance[i]!=0)
        {
            distance1[j]=distance[i];
            j++;
        }
    }
    mini=distance1[0];
    for(i=1;i<j;i++) 
    {
        if(distance1[i]<mini)
        {
            mini=distance1[i];
        }
    }
    return(mini);
}
/*
Output:
(1)enter no of nodes2
enter the adjacency matrix
0 2
2 0
enter the source for broadcasting 1
given adjacency matrix is
0 2 
2 0 
minimal spanning tree
0 2 
2 0 
1 sends message to 0 

(2)enter no of nodes3
enter the adjacency matrix
0 1 2
1 0 5
2 5 0
enter the source for broadcasting 2
given adjacency matrix is
0 1 2 
1 0 5 
2 5 0 
minimal spanning tree
0 1 2 
1 0 0 
2 0 0 
2 sends message to 0 
0 sends message to 1 
*/


/*
Experiment 4 :Implement distance vector routing algorithm for obtaining routing tables at each node. */
#include <stdio.h>
struct node {
    int dist[20];
    int from[20];
}route[10];
int main() {
    int dm[20][20], no;
    printf("Enter no of nodes: ");
    scanf("%d", &no);
    printf("Enter the distance matrix:\n");
    for (int i = 0; i < no; i++) 
    {
        for (int j = 0; j < no; j++) 
        {
            scanf("%d", &dm[i][j]);
            /*  Set distance from i to i as 0 */
            dm[i][i] = 0;
            route[i].dist[j] = dm[i][j];
            route[i].from[j] = j;
        }
    }
    int flag;
    do 
    {
        flag = 0;
        for (int i = 0; i < no; i++) 
        {
            for (int j = 0; j < no; j++) 
            {
                for (int k = 0; k < no; k++) 
                {
                    if ((route[i].dist[j]) > (route[i].dist[k] + route[k].dist[j])) 
                    {
                        route[i].dist[j] = route[i].dist[k] + route[k].dist[j];
                        route[i].from[j] = k;
                        flag = 1;
                    }
                }
            }
        }
    }while (flag);
    for (int i = 0; i < no; i++) 
    {
        printf("\nRouter info for router: %d\n", i + 1);
        printf("Dest\tNext Hop\tDist\n");
        for (int j = 0; j < no; j++)
            printf("%d\t%d\t\t%d\n", j+1, route[i].from[j]+1, route[i].dist[j]);
    }
    return 0;
}
/*
Output:

Enter no of nodes: 3
Enter the distance matrix:
0 2 99
1 0 99
3 2 0

Router info for router: 1   
Dest    Next Hop        Dist
1             1                  0   
2             2                  2   
3             3                  99  

Router info for router: 2
Dest    Next Hop        Dist
1               1                1
2               2                0
3               3                99

Router info for router: 3
Dest    Next Hop        Dist
1              1               3
2              2               2
3              3               0
*/

/*9.Implementation of DNS*/
import java.net.*;
import java.io.*;
import java.util.*;
public class DNS
{
 public static void main(String[] args)
 {
  int n;
  BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
  do
  {
   System.out.println("\n Menu: \n 1. DNS 2. Reverse DNS 3. Exit \n");
   System.out.println("\n Enter your choice");
   n = Integer.parseInt(System.console().readLine());
   if(n==1)
   {
    try
    {
     System.out.println("\n Enter Host Name ");
     String hname=in.readLine();
     InetAddress address;
     address = InetAddress.getByName(hname);
     System.out.println("Host Name: " + address.getHostName());
     System.out.println("IP: " + address.getHostAddress());
    }
    catch(IOException ioe)
    {
     ioe.printStackTrace();
    }
   }
   if(n==2)
   {
    try
    {
       System.out.println("\n Enter IP address");
       String ipstr = in.readLine();
       InetAddress ia ;
       ia= InetAddress.getByName(ipstr);
       System.out.println("IP: "+ipstr);
       System.out.println("Host Name: " +ia.getHostName());
     }
    catch(IOException ioe)
    {
     ioe.printStackTrace();
    }
   }
  }while(!(n==3));
 }
}
/*
OUTPUT:
1. DNS 2. Reverse DNS 3. Exit
Enter your choice
1
Enter Host Name
www.facebook.com
Host Name: www.facebook.com
IP: 157.240.249.35
 Menu:
 1. DNS 2. Reverse DNS 3. Exit
 Enter your choice
2
Enter IP address
215.34.56.0
IP: 215.34.56.0
Host Name: 215.34.56.0
 Menu:
 1. DNS 2. Reverse DNS 3. Exit
*/

//10. Implementation of Ping service.
// Java Program to Ping an IP address 
import java.io.*; 
import java.net.*; 
import java.util.Scanner;
class Main
 {   // Sends ping request to a provided IP address 
  public static void sendPingRequest(String ipAddress) 
              throws UnknownHostException, IOException 
  { 
    InetAddress geek = InetAddress.getByName(ipAddress); 
    System.out.println("Sending Ping Request to " + ipAddress); 
    if (geek.isReachable(5000)) 
      System.out.println("Host is reachable"); 
    else
      System.out.println("Sorry ! We can't reach to this host"); 
  } 
    // Driver code 
  public static void main(String[] args) 
          throws UnknownHostException, IOException 
{   
  String ipAddress;
  Scanner sc=new Scanner(System.in);
  System.out.println("Enter ipAddress");
  ipAddress=sc.next();
  sendPingRequest(ipAddress);
} 
}
/*
OUTPUT: If the host is reachable.
Enter ipAddress
127.0.0.1
Sending Ping Request to 127.0.0.1
Host is reachable
If the host is not reachable.

Enter ipAddress192.168.0.1
Sending Ping Request to 192.168.0.1Sorry ! We can't reach to this host
*/
